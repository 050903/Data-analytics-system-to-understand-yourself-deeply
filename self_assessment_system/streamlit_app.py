# self_assessment_system/streamlit_app.py
import streamlit as st
from core.question_generator import QuestionGenerator
from core.data_storage import DataStorage
from core.analyzer import Analyzer
from visualization.plotter import Plotter # Plotly s·∫Ω hi·ªÉn th·ªã tr·ª±c ti·∫øp trong Streamlit
from reporting.report_generator import ReportGenerator # C√≥ th·ªÉ hi·ªÉn th·ªã HTML ho·∫∑c link t·∫£i
import os
import json # ƒê·ªÉ hi·ªÉn th·ªã debug

# --- Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng d√πng chung ---
# N√™n cache ƒë·ªÉ tr√°nh t·∫£i l·∫°i c√¢u h·ªèi m·ªói l·∫ßn t∆∞∆°ng t√°c
@st.cache_resource # D√πng cache_resource cho c√°c ƒë·ªëi t∆∞·ª£ng kh√¥ng th·ªÉ hash
def load_question_generator():
    return QuestionGenerator()

@st.cache_resource
def get_data_storage():
    return DataStorage()

@st.cache_resource
def get_plotter():
    return Plotter(output_dir="output_charts_streamlit") # Th∆∞ m·ª•c ri√™ng cho streamlit

@st.cache_resource
def get_report_generator():
    return ReportGenerator(output_dir="output_reports_streamlit")


q_generator = load_question_generator()
storage = get_data_storage()
plotter = get_plotter() # Plotter s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ t·∫°o ·∫£nh cho report, ho·∫∑c v·∫Ω tr·ª±c ti·∫øp
reporter = get_report_generator()
all_questions_data = q_generator.get_all_questions()
# Analyzer c·∫ßn all_questions_data, kh·ªüi t·∫°o khi c·∫ßn
# analyzer = Analyzer(all_questions_data)


def display_streamlit_question(question_data, question_key_suffix):
    st.subheader(f"C√¢u h·ªèi (ID: {question_data['id']})")
    st.write(f"**Danh m·ª•c:** {question_data['category']}")
    st.markdown(question_data['text']) # D√πng markdown ƒë·ªÉ hi·ªÉn th·ªã text t·ªët h∆°n

    q_type = question_data['type']
    q_id = question_data['id']
    # T·∫°o key duy nh·∫•t cho m·ªói widget Streamlit ƒë·ªÉ tr√°nh l·ªói DuplicateWidgetID
    widget_key = f"{q_id}_{question_key_suffix}"

    answer = None
    if q_type == "likert":
        scale_min = question_data.get('scale_min', 1)
        scale_max = question_data.get('scale_max', 5)
        answer = st.slider("C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:", min_value=scale_min, max_value=scale_max, value=(scale_min + scale_max) // 2, key=widget_key)
    elif q_type == "multiple_choice_single":
        options_dict = {opt['text']: opt['value'] for opt in question_data.get('options', [])}
        # Hi·ªÉn th·ªã text cho ng∆∞·ªùi d√πng, nh∆∞ng l∆∞u value
        selected_text = st.radio("Ch·ªçn m·ªôt ƒë√°p √°n:", options=list(options_dict.keys()), key=widget_key)
        if selected_text:
            answer = options_dict[selected_text]
    elif q_type == "yes_no":
        # selected_option = st.radio("Tr·∫£ l·ªùi:", options=["C√≥", "Kh√¥ng"], index=None, key=widget_key)
        # answer = selected_option
        # Ho·∫∑c d√πng selectbox ƒë·ªÉ c√≥ placeholder
        selected_option = st.selectbox("Tr·∫£ l·ªùi:", options=["", "C√≥", "Kh√¥ng"], format_func=lambda x: x if x else "Ch·ªçn...", key=widget_key)
        if selected_option:
            answer = selected_option

    elif q_type == "open_short":
        answer = st.text_input("Nh·∫≠p c√¢u tr·∫£ l·ªùi ng·∫Øn:", key=widget_key)
    elif q_type == "open_long":
        answer = st.text_area("Nh·∫≠p c√¢u tr·∫£ l·ªùi chi ti·∫øt:", key=widget_key)
    else:
        st.warning(f"Lo·∫°i c√¢u h·ªèi '{q_type}' ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß trong UI n√†y.")
        answer = st.text_input("Nh·∫≠p c√¢u tr·∫£ l·ªùi (fallback):", key=widget_key)
    return answer


def run_streamlit_assessment():
    st.title("üìù H·ªá Th·ªëng T·ª± ƒê√°nh Gi√° C√° Nh√¢n")

    if 'user_id' not in st.session_state:
        st.session_state.user_id = ""
    if 'current_question_index' not in st.session_state:
        st.session_state.current_question_index = 0
    if 'user_responses' not in st.session_state:
        st.session_state.user_responses = []
    if 'assessment_complete' not in st.session_state:
        st.session_state.assessment_complete = False
    if 'show_report' not in st.session_state:
        st.session_state.show_report = False


    if not st.session_state.assessment_complete:
        # --- Giai ƒëo·∫°n nh·∫≠p User ID ---
        if not st.session_state.user_id:
            user_id_input = st.text_input("Vui l√≤ng nh·∫≠p T√™n ho·∫∑c ID c·ªßa b·∫°n:", key="user_id_input")
            if st.button("B·∫Øt ƒë·∫ßu", key="start_button"):
                if user_id_input:
                    st.session_state.user_id = user_id_input
                    st.rerun() # Ch·∫°y l·∫°i script ƒë·ªÉ c·∫≠p nh·∫≠t UI
                else:
                    st.error("T√™n/ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            return # D·ª´ng ·ªü ƒë√¢y cho ƒë·∫øn khi c√≥ user_id

        st.info(f"Ch√†o m·ª´ng, {st.session_state.user_id}!")

        # --- Giai ƒëo·∫°n tr·∫£ l·ªùi c√¢u h·ªèi ---
        num_questions = len(all_questions_data)
        current_idx = st.session_state.current_question_index

        if current_idx < num_questions:
            question = all_questions_data[current_idx]
            st.progress((current_idx + 1) / num_questions)
            st.markdown(f"--- **C√¢u {current_idx + 1} / {num_questions}** ---")

            # S·ª≠ d·ª•ng form ƒë·ªÉ nh√≥m c√¢u h·ªèi v√† n√∫t b·∫•m
            with st.form(key=f"question_form_{current_idx}"):
                user_answer = display_streamlit_question(question, f"q{current_idx}")
                # N√∫t "Ti·∫øp theo" v√† "L√πi l·∫°i" (n·∫øu mu·ªën)
                cols = st.columns(2)
                submitted_next = cols[1].form_submit_button("Ti·∫øp theo ‚ùØ")
                # submitted_prev = cols[0].form_submit_button("‚ùÆ L√πi l·∫°i", disabled=(current_idx == 0))


                if submitted_next:
                    # L∆∞u c√¢u tr·∫£ l·ªùi hi·ªán t·∫°i (n·∫øu c√≥)
                    # C·∫ßn ƒë·∫£m b·∫£o user_answer kh√¥ng ph·∫£i l√† None ho·∫∑c r·ªóng n·∫øu c√¢u h·ªèi y√™u c·∫ßu
                    is_required = question['type'] not in ['open_short', 'open_long'] # V√≠ d·ª• ƒë∆°n gi·∫£n
                    if is_required and (user_answer is None or str(user_answer).strip() == ""):
                        st.warning("Vui l√≤ng tr·∫£ l·ªùi c√¢u h·ªèi n√†y.")
                    else:
                        # Ghi ƒë√® n·∫øu c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi tr∆∞·ªõc ƒë√≥ (khi d√πng n√∫t back)
                        found = False
                        for i, resp in enumerate(st.session_state.user_responses):
                            if resp['question_id'] == question['id']:
                                st.session_state.user_responses[i]['answer'] = user_answer
                                found = True
                                break
                        if not found:
                            st.session_state.user_responses.append({
                                "question_id": question['id'],
                                "answer": user_answer
                            })

                        st.session_state.current_question_index += 1
                        st.rerun()

                # if submitted_prev:
                #     st.session_state.current_question_index -= 1
                #     st.rerun()

        else: # ƒê√£ tr·∫£ l·ªùi h·∫øt c√¢u h·ªèi
            st.success("üéâ B·∫°n ƒë√£ ho√†n th√†nh b√†i ƒë√°nh gi√°!")
            st.session_state.assessment_complete = True
            # L∆∞u tr·ªØ k·∫øt qu·∫£
            if st.session_state.user_responses:
                storage.save_responses(st.session_state.user_id, st.session_state.user_responses, assessment_name="streamlit_assessment_v1")
                st.info("K·∫øt qu·∫£ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u l·∫°i.")
            if st.button("Xem K·∫øt Qu·∫£ Ph√¢n T√≠ch", key="view_results_button"):
                st.session_state.show_report = True
                st.rerun()

    # --- Giai ƒëo·∫°n hi·ªÉn th·ªã b√°o c√°o ---
    if st.session_state.assessment_complete and st.session_state.show_report:
        st.header("üìä K·∫øt Qu·∫£ Ph√¢n T√≠ch C√° Nh√¢n")

        # T·∫£i l·∫°i ph·∫£n h·ªìi m·ªõi nh·∫•t ƒë·ªÉ ƒë·∫£m b·∫£o (ho·∫∑c d√πng t·ª´ session_state n·∫øu tin c·∫≠y)
        user_final_responses = st.session_state.user_responses
        # Ho·∫∑c:
        # latest_data = storage.load_latest_response(st.session_state.user_id, "streamlit_assessment_v1")
        # user_final_responses = latest_data['responses'] if latest_data else []


        if not user_final_responses:
            st.error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph·∫£n h·ªìi ƒë·ªÉ ph√¢n t√≠ch.")
            return

        analyzer = Analyzer(all_questions_data) # Kh·ªüi t·∫°o analyzer ·ªü ƒë√¢y
        overall_scores = analyzer.calculate_overall_scores(user_final_responses)
        strengths_weaknesses = analyzer.identify_strengths_weaknesses(overall_scores)
        value_proportions = analyzer.analyze_value_proportions(user_final_responses, category_filter="Gi√° tr·ªã c·ªët l√µi")
        motivation_trends = analyzer.analyze_motivation_trends(user_final_responses)

        open_ended_responses_formatted = []
        for resp in user_final_responses:
            q_info = q_generator.get_question_by_id(resp['question_id'])
            if q_info and q_info['type'] in ['open_short', 'open_long'] and resp['answer']:
                open_ended_responses_formatted.append({
                    "question_text": q_info['text'],
                    "answer": resp['answer']
                })

        # --- Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr·ª±c ti·∫øp v·ªõi Plotly ---
        st.subheader("B·∫£n ƒë·ªì nƒÉng l·ª±c c√° nh√¢n")
        main_dimensions_for_radar = {
            k: v for k, v in overall_scores.items()
            if k in ["Linguistic Intelligence", "Logical-Mathematical Intelligence", "Spatial Intelligence",
                     "Bodily-Kinesthetic Intelligence", "Musical Intelligence", "Interpersonal Intelligence",
                     "Intrapersonal Intelligence", "Honesty & Integrity", "Intrinsic Motivation"] # C·∫≠p nh·∫≠t danh s√°ch n√†y
        }
        main_dimensions_for_radar = {k: overall_scores.get(k, 0) for k in main_dimensions_for_radar.keys()}
        valid_radar_scores = {k: v for k, v in main_dimensions_for_radar.items() if isinstance(v, (int, float))}

        if valid_radar_scores:
            categories_radar = list(valid_radar_scores.keys())
            values_radar = list(valid_radar_scores.values())
            categories_radar_closed = categories_radar + [categories_radar[0]]
            values_radar_closed = values_radar + [values_radar[0]]
            fig_radar = go.Figure()
            fig_radar.add_trace(go.Scatterpolar(r=values_radar_closed, theta=categories_radar_closed, fill='toself', name=f'H·ªì s∆°'))
            max_val_radar = max(values_radar) if values_radar else 5
            radial_range_radar = [0, max(5, np.ceil(max_val_radar))]
            fig_radar.update_layout(polar=dict(radialaxis=dict(visible=True, range=radial_range_radar)))
            st.plotly_chart(fig_radar, use_container_width=True)
        else:
            st.write("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì radar.")

        st.subheader("ƒêi·ªÉm m·∫°nh v√† lƒ©nh v·ª±c c·∫ßn ch√∫ √Ω")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("<h5>ƒêi·ªÉm m·∫°nh:</h5>", unsafe_allow_html=True)
            if strengths_weaknesses["strengths"]:
                for item, score in strengths_weaknesses["strengths"]:
                    st.markdown(f"- {item}: **{score}**")
            else:
                st.write("Ch∆∞a x√°c ƒë·ªãnh.")
        with col2:
            st.markdown("<h5>Lƒ©nh v·ª±c c·∫ßn ch√∫ √Ω:</h5>", unsafe_allow_html=True)
            if strengths_weaknesses["weaknesses"]:
                for item, score in strengths_weaknesses["weaknesses"]:
                    st.markdown(f"- {item}: **{score}**")
            else:
                st.write("Ch∆∞a x√°c ƒë·ªãnh.")


        if value_proportions:
            st.subheader("T·ª∑ l·ªá Gi√° tr·ªã c·ªët l√µi")
            fig_pie_values = go.Figure(data=[go.Pie(labels=list(value_proportions.keys()),
                                                   values=list(value_proportions.values()), hole=.3)])
            st.plotly_chart(fig_pie_values, use_container_width=True)

        if motivation_trends:
            st.subheader("Xu h∆∞·ªõng ƒê·ªông l·ª±c")
            # C√≥ th·ªÉ d√πng Bar chart thay v√¨ Pie n·∫øu c√≥ nhi·ªÅu lo·∫°i ƒë·ªông l·ª±c
            fig_pie_motivation = go.Figure(data=[go.Pie(labels=list(motivation_trends.keys()),
                                                       values=list(motivation_trends.values()), hole=.3)])
            st.plotly_chart(fig_pie_motivation, use_container_width=True)

        if open_ended_responses_formatted:
            st.subheader("Ph·∫£n h·ªìi c√¢u h·ªèi m·ªü")
            for resp_data in open_ended_responses_formatted:
                with st.expander(f"C√¢u h·ªèi: {resp_data['question_text'][:50]}..."): # R√∫t g·ªçn text c√¢u h·ªèi
                    st.write(resp_data['answer'])

        # --- N√∫t t·∫£i b√°o c√°o HTML (t√πy ch·ªçn) ---
        # T·∫°o b√°o c√°o HTML v√† cung c·∫•p link t·∫£i
        # C·∫ßn ƒë·∫£m b·∫£o plotter ƒë√£ l∆∞u ·∫£nh n·∫øu b√°o c√°o HTML d√πng ·∫£nh t·ª´ file
        # Ho·∫∑c s·ª≠a ReportGenerator ƒë·ªÉ nh·∫≠n ƒë·ªëi t∆∞·ª£ng Figure c·ªßa Plotly v√† nh√∫ng base64
        st.markdown("---")
        if st.button("T·∫°o v√† T·∫£i B√°o c√°o HTML Chi ti·∫øt", key="download_html_report"):
            # C·∫ßn t·∫°o l·∫°i c√°c chart paths n·∫øu ReportGenerator c·∫ßn
            chart_paths_for_report = {} # Logic t·∫°o chart paths t∆∞∆°ng t·ª± main_console
            # V√≠ d·ª•:
            if valid_radar_scores:
                radar_files_report = plotter.create_radar_chart_plotly(valid_radar_scores, st.session_state.user_id, f"B·∫£n ƒë·ªì nƒÉng l·ª±c - {st.session_state.user_id}")
                chart_paths_for_report["radar_png"] = radar_files_report.get("png")

            # ... (t·∫°o c√°c chart kh√°c cho b√°o c√°o n·∫øu c·∫ßn)

            html_report_path = reporter.generate_html_report(
                st.session_state.user_id,
                overall_scores,
                strengths_weaknesses,
                value_proportions,
                motivation_trends,
                open_ended_responses_formatted,
                chart_paths_for_report # Truy·ªÅn c√°c ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë√£ l∆∞u
            )
            if html_report_path and os.path.exists(html_report_path):
                with open(html_report_path, "rb") as fp:
                    st.download_button(
                        label="T·∫£i xu·ªëng B√°o c√°o HTML",
                        data=fp,
                        file_name=os.path.basename(html_report_path),
                        mime="text/html"
                    )
            else:
                st.error("Kh√¥ng th·ªÉ t·∫°o file b√°o c√°o HTML.")


        if st.button("L√†m b√†i ƒë√°nh gi√° m·ªõi", key="restart_assessment"):
            # Reset session state
            for key in list(st.session_state.keys()):
                if key not in ['user_id']: # Gi·ªØ l·∫°i user_id n·∫øu mu·ªën
                     del st.session_state[key]
            # Ho·∫∑c reset c·ª• th·ªÉ:
            # st.session_state.current_question_index = 0
            # st.session_state.user_responses = []
            # st.session_state.assessment_complete = False
            # st.session_state.show_report = False
            st.rerun()

# Ch·∫°y ·ª©ng d·ª•ng Streamlit
if __name__ == "__main__":
    if not all_questions_data:
        st.error("L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ t·∫£i file c√¢u h·ªèi 'assets/questions.json'. Vui l√≤ng ki·ªÉm tra file v√† ƒë∆∞·ªùng d·∫´n.")
    else:
        run_streamlit_assessment()